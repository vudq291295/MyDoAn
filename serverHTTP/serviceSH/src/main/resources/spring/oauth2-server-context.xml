<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:oauth="http://www.springframework.org/schema/security/oauth2"
	xmlns:sec="http://www.springframework.org/schema/security"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/context
          http://www.springframework.org/schema/context/spring-context.xsd
          http://www.springframework.org/schema/beans
          http://www.springframework.org/schema/beans/spring-beans.xsd
          http://www.springframework.org/schema/security/oauth2
		  http://www.springframework.org/schema/security/spring-security-oauth2-2.0.xsd
		  http://www.springframework.org/schema/security
		  http://www.springframework.org/schema/security/spring-security.xsd
		  http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">

	<context:annotation-config />
	<context:component-scan base-package="com.dqv.spring.oauth2.controller" />
	<context:component-scan base-package="com.dqv.spring.oauth2.provider" />
		<context:component-scan base-package="com.dqv.spring.oauth2.DAO" />
	     <context:component-scan base-package="com.dqv.spring.oauth2" />
          <context:component-scan base-package="com.dqv.spring.oauth2.DAO" />
     
	
	<mvc:annotation-driven />
    <mvc:default-servlet-handler />
    <mvc:resources mapping="/resources/**" location="/resources/"/>
    
    <!-- View resolver -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix">
			<value>/WEB-INF/pages/</value>
		</property>
		<property name="suffix">
			<value>.jsp</value>
		</property>
	</bean>
    
	<!-- the authorization-server -->
	<oauth:authorization-server client-details-service-ref="clientDetails" token-services-ref="tokenServices"
		user-approval-handler-ref="userApprovalHandler">
		<oauth:authorization-code />
		<oauth:implicit />
		<oauth:refresh-token />
		<oauth:client-credentials />
		<oauth:password />
	</oauth:authorization-server>
	
	<!-- Application clients -->
	<oauth:client-details-service id="clientDetails">
		<oauth:client client-id="test" secret="test" authorized-grant-types="client_credentials,password,authorization_code,refresh_token,implicit" authorities="ROLE_CLIENT" scope="read,write,openid" resource-ids="openid" autoapprove="true" />
		<oauth:client client-id="resource1" secret="resource1" authorized-grant-types="client_credentials" authorities="ROLE_RESOURCE_SERVER" scope="read,write"  autoapprove="true" />
	</oauth:client-details-service>
	
	<!-- Token store -->
	<bean id="tokenStore" class="org.springframework.security.oauth2.provider.token.store.InMemoryTokenStore" />
	
	<!-- Token services -->
	<bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
		<property name="tokenStore" ref="tokenStore" />
		<property name="supportRefreshToken" value="true" />
		<property name="clientDetailsService" ref="clientDetails" />
	</bean>

	<!-- User approval handler -->
	<bean id="userApprovalHandler" class="org.springframework.security.oauth2.provider.approval.TokenStoreUserApprovalHandler">
		<property name="tokenStore" ref="tokenStore" />
		<property name="clientDetailsService" ref="clientDetails" />
        <property name="requestFactory" ref="requestFactory" />
	</bean>
	
	<bean id="requestFactory" class="org.springframework.security.oauth2.provider.request.DefaultOAuth2RequestFactory">
        <constructor-arg name="clientDetailsService" ref="clientDetails" />
    </bean>
	
	<!-- Token endpoint (OAuth2 protocol) -->
	<http pattern="/oauth/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/oauth/token" access="IS_AUTHENTICATED_FULLY" />
		<anonymous enabled="false" />
		<http-basic entry-point-ref="clientAuthenticationEntryPoint" />
		<!-- include this only if you need to authenticate clients via request parameters -->
		<custom-filter ref="clientCredentialsTokenEndpointFilter" after="BASIC_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
	
	<!-- Token validation endpoint -->
	<http name="checkTokenSecurity" pattern="/oauth/check_token" create-session="stateless" entry-point-ref="clientAuthenticationEntryPoint"
        authentication-manager-ref="clientAuthenticationManager" use-expressions="true"
        xmlns="http://www.springframework.org/schema/security">
        <intercept-url pattern="/oauth/check_token" access="hasRole('ROLE_RESOURCE_SERVER')" />
        <anonymous enabled="false" />
        <custom-filter ref="clientAuthenticationFilter" position="BASIC_AUTH_FILTER" />
        <access-denied-handler ref="oauthAccessDeniedHandler" />
    </http>
    
    <!-- Userinfo endpoint (oauth protected resource) -->
    <http name="userInfoSecurity" pattern="/userinfo" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="clientAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="scope=openid" />
		<custom-filter ref="openidResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
		
		    <!-- Userinfo endpoint (oauth protected resource) -->
    <http name="getAllRoom" pattern="/api/**" create-session="stateless" authentication-manager-ref="emptyAuthenticationManager"
		entry-point-ref="clientAuthenticationEntryPoint" access-decision-manager-ref="accessDecisionManager"
		xmlns="http://www.springframework.org/schema/security">
		<intercept-url pattern="/**" access="scope=openid" />
		<custom-filter ref="openidResourceAuthenticationFilter" position="PRE_AUTH_FILTER" />
		<access-denied-handler ref="oauthAccessDeniedHandler" />
	</http>
		
	<oauth:resource-server id="openidResourceAuthenticationFilter" token-services-ref="tokenServices"
		resource-id="openid" entry-point-ref="clientAuthenticationEntryPoint" />
    
	<http auto-config="false" xmlns="http://www.springframework.org/schema/security">
	  	<intercept-url pattern="/resources/**" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
      	<intercept-url pattern="/login" access="IS_AUTHENTICATED_ANONYMOUSLY" />
      	<intercept-url pattern="/logout" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/check_token" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<intercept-url pattern="/oauth/**" access="ROLE_USER" />
		<intercept-url pattern="/**" access="IS_AUTHENTICATED_ANONYMOUSLY" />
		<sec:form-login  
		    login-page="/login" 
		    default-target-url="/"
			authentication-failure-url="/login?error" />
		<custom-filter position="LOGOUT_FILTER" ref="logoutFilter" />
	</http>
	
	<bean id="logoutFilter" class="org.springframework.security.web.authentication.logout.LogoutFilter">
		<constructor-arg name="logoutSuccessHandler" ref="logoutSuccessHandler" />
		<constructor-arg name="handlers">
			<list>
				<ref bean="securityContextLogoutHandler" />
			</list>			
		</constructor-arg>
		<property name="filterProcessesUrl" value="/logout" />
	</bean>

	<bean id="logoutSuccessHandler" class="com.dqv.spring.oauth2.handlers.CustomLogoutSuccessHandler">
		<property name="defaultTargetUrl" value="/login?logout"	/>
	</bean>
	
	<bean id="securityContextLogoutHandler" class="org.springframework.security.web.authentication.logout.SecurityContextLogoutHandler">
    <property name="invalidateHttpSession" value="true"/>
	</bean>
	
	<!-- Client authentication to authenticate oauth2 application clients (define via clientDetails bean) -->
	<authentication-manager id="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
		<authentication-provider user-service-ref="clientDetailsUserService" />
	</authentication-manager>
	
	<!-- Default authentication manager (Tests only) -->
	<sec:authentication-manager>
		<sec:authentication-provider user-service-ref="myUserDetailsService">
			<!-- <sec:user-service>
				<sec:user name="userTest" password="userTest" authorities="ROLE_USER" />
			</sec:user-service> -->
		</sec:authentication-provider>
    </sec:authentication-manager>
    
    <!-- Empty authentication manager -->
    <authentication-manager id="emptyAuthenticationManager" xmlns="http://www.springframework.org/schema/security" />
	
	<bean id="clientDetailsUserService" class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
		<constructor-arg ref="clientDetails" />
	</bean>
	
	<bean id="clientAuthenticationEntryPoint" class="org.springframework.security.oauth2.provider.error.OAuth2AuthenticationEntryPoint">
		<property name="realmName" value="your-app/client" />
		<property name="typeName" value="Basic" />
	</bean>
	
	<bean id="clientAuthenticationFilter" class="org.springframework.security.web.authentication.www.BasicAuthenticationFilter">
		<constructor-arg ref="clientAuthenticationManager" />
		<constructor-arg ref="clientAuthenticationEntryPoint" />
	</bean>
	
	<bean id="clientCredentialsTokenEndpointFilter" class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
		<property name="authenticationManager" ref="clientAuthenticationManager" />
	</bean>
	
	<bean id="oauthAccessDeniedHandler" class="org.springframework.security.oauth2.provider.error.OAuth2AccessDeniedHandler" />

	<bean id="checkTokenEndPoint" class="org.springframework.security.oauth2.provider.endpoint.CheckTokenEndpoint">
		<constructor-arg ref="tokenServices" />
	</bean>
	
	<bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased">
      <constructor-arg>
          <list>
              <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter">
                  <property name="scopePrefix" value="scope=" />
              </bean>
              <bean class="org.springframework.security.access.vote.RoleVoter" />
              <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
          </list>
      </constructor-arg>
  </bean>
	
</beans>